import java.util.*

fun main(args: Array<String>) {
    fun minimumCost(input: Array<IntArray>, x: Int, y: Int) {
        for (i in 1 until x) {
            input[0][i] = input[0][i - 1] + input[0][i]
        }
        for (i in 1 until y) {
            input[i][0] = input[i - 1][0] + input[i][0]
        }
        for (i in 1 until y) {
            for (j in 1 until x) {
                input[i][j] = input[i][j] + minOf(input[i - 1][j], input[i][j - 1])
            }
        }
    }

    fun solvePuzzle1(input: List<List<Int>>): Int {
        val matrix = input.map { it.toIntArray() }.toTypedArray()
        matrix[0][0] = 0
        val y = matrix.size
        val x = matrix[0].size
        minimumCost(matrix, x, y)

        return matrix[y - 1][x - 1]
    }

    fun solvePuzzle2(input: List<List<Int>>): Int {
        val matrix = input.map { it.toIntArray() }.toTypedArray()
        matrix[0][0] = 0
        val y = matrix.size
        val x = matrix[0].size
        val destinationY = y * 5 - 1
        val destinationX = x * 5 - 1

        data class Chiton(val x: Int, val y: Int) {
            fun risk(): Int {
                val dy = this.y / y
                val dx = this.x / x
                val origin = matrix[this.y % y][this.x % x]
                val new = origin + dx + dy
                return new.takeIf { it < 10 } ?: (new - 9)
            }

            fun neighbors() = listOf(
                Chiton(this.x, this.y - 1),
                Chiton(this.x, this.y + 1),
                Chiton(this.x - 1, this.y),
                Chiton(this.x + 1, this.y)
            )
        }

        class Traversal(val chiton: Chiton, val totalRisk: Int) : Comparable<Traversal> {
            override fun compareTo(other: Traversal): Int = this.totalRisk - other.totalRisk
        }

        val visited = mutableSetOf<Chiton>()
        val q = PriorityQueue<Traversal>().apply { add(Traversal(Chiton(0, 0), 0)) }
        while (q.isNotEmpty()) {
            val current = q.poll()

            if (current.chiton.y == destinationY && current.chiton.x == destinationX) {
                return current.totalRisk
            }

            if (current.chiton !in visited) {
                visited.add(current.chiton)
                current.chiton
                    .neighbors()
                    .filter { it.y in (0..destinationY) && it.x in (0..destinationX) }
                    .forEach {
                        q.add(Traversal(it, current.totalRisk + it.risk()))
                    }
            }
        }

        error("Somethings went wrong.")
    }

    val input: List<List<Int>> = readFile("src/main/resources/day_15.txt").map { it.map { it.digitToInt() } }
    println(solvePuzzle1(input))
    println(solvePuzzle2(input))
}


//1163751742
//1381373672
//2136511328
//3694931569
//7463417111
//1319128137
//1359912421
//3125421639
//1293138521
//2311944581


//[1]  2    8    11   18   23   24   31   35   37
//[2]  5    13   12   15   22   25   31   38   39
//[4]  [5]  [8]  [14] [19] [20] [21] 24   26   34
//7    11   17   18   27   23   [22] [27] 32   41
//14   15   21   24   28   24   29   [28] [29] 30
//15   18   29   33   29   26   34   29   [32] 37
//16   19   24   33   38   27   29   33   [34] 35
//19   20   22   27   31   29   30   36   [37] 44
//20   22   31   30   31   32   38   41   [39] [40]
//22   25   26   27   36   36   40   45   47   [41]

//1163751742 2274862853 3385973964 4496184175 5517295286
//1381373672 2492484783 3513595894 4624616915 5735727126
//2136511328 3247622439 4358733541 5469844652 6571955763
//3694931569 4715142671 5826253782 6937364893 7148475914
//7463417111 8574528222 9685639333 1796741444 2817852555
//1319128137 2421239248 3532341359 4643452461 5754563572
//1359912421 2461123532 3572234643 4683345754 5794456865
//3125421639 4236532741 5347643852 6458754963 7569865174
//1293138521 2314249632 3425351743 4536462854 5647573965
//2311944581 3422155692 4533266713 5644377824 6755488935
//
//2274862853 3385973964 4496184175 5517295286 6628316397
//2492484783 3513595894 4624616915 5735727126 6846838237
//3247622439 4358733541 5469844652 6571955763 7682166874
//4715142671 5826253782 6937364893 7148475914 8259586125
//8574528222 9685639333 1796741444 2817852555 3928963666
//2421239248 3532341359 4643452461 5754563572 6865674683
//2461123532 3572234643 4683345754 5794456865 6815567976
//4236532741 5347643852 6458754963 7569865174 8671976285
//2314249632 3425351743 4536462854 5647573965 6758684176
//3422155692 4533266713 5644377824 6755488935 7866599146
//
//3385973964 4496184175 5517295286 6628316397 7739427418
//3513595894 4624616915 5735727126 6846838237 7957949348
//4358733541 5469844652 6571955763 7682166874 8793277985
//5826253782 6937364893 7148475914 8259586125 9361697236
//9685639333 1796741444 2817852555 3928963666 4139174777
//3532341359 4643452461 5754563572 6865674683 7976785794
//3572234643 4683345754 5794456865 6815567976 7926678187
//5347643852 6458754963 7569865174 8671976285 9782187396
//3425351743 4536462854 5647573965 6758684176 7869795287
//4533266713 5644377824 6755488935 7866599146 8977611257
//
//4496184175 5517295286 6628316397 7739427418 8841538529
//4624616915 5735727126 6846838237 7957949348 8168151459
//5469844652 6571955763 7682166874 8793277985 9814388196
//6937364893 7148475914 8259586125 9361697236 1472718347
//1796741444 2817852555 3928963666 4139174777 5241285888
//4643452461 5754563572 6865674683 7976785794 8187896815
//4683345754 5794456865 6815567976 7926678187 8137789298
//6458754963 7569865174 8671976285 9782187396 1893298417
//4536462854 5647573965 6758684176 7869795287 8971816398
//5644377824 6755488935 7866599146 8977611257 9188722368
//
//5517295286 6628316397 7739427418 8841538529 9952649631
//5735727126 6846838237 7957949348 8168151459 9279262561
//6571955763 7682166874 8793277985 9814388196 1925499217
//7148475914 8259586125 9361697236 1472718347 2583829458
//2817852555 3928963666 4139174777 5241285888 6352396999
//5754563572 6865674683 7976785794 8187896815 9298917926
//5794456865 6815567976 7926678187 8137789298 9248891319
//7569865174 8671976285 9782187396 1893298417 2914319528
//5647573965 6758684176 7869795287 8971816398 9182927419
//6755488935 7866599146 8977611257 9188722368 1299833479